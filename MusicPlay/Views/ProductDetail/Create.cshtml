@model MusicPlay.Models.ProductDetailModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>ProductDetailModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.Label("Products", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.ProductId, ViewData["products"] as IEnumerable<SelectListItem>, "Select product", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ProductId)
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Country", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.CountryId, ViewData["countries"] as IEnumerable<SelectListItem>, "Select Country", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CountryId)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.YearOfProduction, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.YearOfProduction, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.YearOfProduction, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Manufacturer, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Manufacturer, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Manufacturer, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>

</div>
}

<div>
    @Html.ActionLink("Back to Settings", "Settings", "Settings")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            $('#productslst').change(function (event) { //la schimbarea valorii in lista de produse
                event.preventDefault();
                //url-ul catre controllerul Localitati, metoda LoadLocalitati cu id-ul judetului ales

                var url = "/ProductDetail/LoadProductDetails/" + $('#productslst').val();
                $('#Id').load(url, function (response) { //apel ajax prin get - se returneaza un string JSON
                    var lstobj = $.parseJSON(response); //se deserializeaza mesajul JSON in lstobj (lista de obiecte SelectItem)
                    var htmlitems = "";
                    for (i in lstobj) //se itereaza colectia si se formeaza codul html pentru optiunile din lista localitatilor
                        htmlitems = htmlitems + '<option value = "' + lstobj[i].Value + '" > ' + lstobj[i].Text + '</option > ';
                    $('#Id').html(htmlitems); //se adauga optiunile la lista localitatilor
                });
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $('#countrieslst').change(function (event) { //la schimbarea valorii in lista de produse
                event.preventDefault();
                //url-ul catre controllerul Localitati, metoda LoadLocalitati cu id-ul judetului ales

                var url = "/ProductDetail/LoadCountries/" + $('#countrieslst').val();
                $('#Id').load(url, function (response) { //apel ajax prin get - se returneaza un string JSON
                    var lstobj = $.parseJSON(response); //se deserializeaza mesajul JSON in lstobj (lista de obiecte SelectItem)
                    var htmlitems = "";
                    for (i in lstobj) //se itereaza colectia si se formeaza codul html pentru optiunile din lista localitatilor
                        htmlitems = htmlitems + '<option value = "' + lstobj[i].Value + '" > ' + lstobj[i].Text + '</option > ';
                    $('#Id').html(htmlitems); //se adauga optiunile la lista localitatilor
                });
            });
        });
    </script>
}
